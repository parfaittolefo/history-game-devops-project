pipeline{
  agent any

  //Environment 
    environment {
      APP_NAME = "history-game-devops-project-prod"
      RELEASE = "1.0.0"
      DOCKER_USER = "hack2k21"
      IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
      IMAGE_REPOS = "devops-thesis-project"
      IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }

  stages{
    //Code pull from github
    
  /*stage('SCM (Get the source code from Git)') {
    steps{checkout scm}
  }*/

   

    //code analysis with sonarqube
    stage('SonarQube Analysis') {

    //def scannerHome = tool 'SonarScanner';
    steps
    {
      
          script {
                   def scannerHome = tool 'SonarScanner'
                   withSonarQubeEnv() {
                    sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
    }
  }
    
    // Code vulnerabily scan with OWASP ZAP TOP 10

     stage('Dependancy-Vuln check OWASP') {

    steps{dependencyCheck additionalArguments: '--format=HTML', odcInstallation: 'OWASP-ZAP-DP'}
  }


// Depoeiment on test env
 stage('Deploiement on test env)') {

   steps{sh 'cd Docker-preprod && sudo docker compose up -d'}
  }

//Run test 

 stage('Tests Runing') {
    //sh "cd /var/www/html/ && rm -rf history-game-devops-project; git clone https://github.com/parfaittolefo/history-game-devops-project.git"
    steps{sh "composer update --lock --ignore-platform-reqs"
    sh "composer install --optimize-autoloader --ignore-platform-reqs"
    sh "php8.1 vendor/bin/codecept run --steps --debug --html"}
   
    
}

//Publish report

  stage('Generating Allure Reports') {
        steps{allure([
            includeProperties: false,
            jdk: '',
            properties: [],
            reportBuildPolicy: 'ALWAYS',
            results: [[path: 'tests/_output/allure-results']]
        ])}
    }


//Build  prod docker image

stage('Build & push prod docker image'){

            steps {
            sh "docker build -t ${IMAGE_NAME} ."
            sh "docker logout"

           withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOKER_USER')]) {
            
              sh "sudo docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}"
              sh " docker tag ${IMAGE_NAME}:latest ${DOCKER_USER}/${IMAGE_REPOS}:${IMAGE_TAG}"
              sh "sudo docker push ${DOCKER_USER}/${IMAGE_REPOS}:${IMAGE_TAG}"
              }
          } 
        }

//Docker image scanning with trivy
 stage("Trivy Image Scan") {
             steps {
              withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOKER_USER')]){
                 script {
                    sh "sudo docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}"
	                  sh ("trivy image ${DOCKER_USER}/${IMAGE_REPOS}:1.0.0-187 --no-progress --scanners vuln  --exit-code 0 --severity HIGH,CRITICAL --format table > trivyimage.txt")
                 }}
             }
         }


//Cleanup Artifacts
stage ('Cleanup Artifacts') {
             
          steps{
            sh "docker rmi ${IMAGE_REPOS}:${IMAGE_TAG}"
            sh "docker rmi ${IMAGE_NAME}:latest"}
             
         }
}
}