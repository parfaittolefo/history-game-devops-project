node {
    //Code pull from github
  stage('SCM (Get the source code from Git)') {
    checkout scm
  }

    //code analysis with sonarqube
  stage('SonarQube Analysis') {
    def scannerHome = tool 'SonarScanner';
    withSonarQubeEnv() {
      sh "${scannerHome}/bin/sonar-scanner"
    }
  }
    
    // Code vulnerabily scan with OWASP ZAP TOP 10

     stage('Dependancy-Vuln check OWASP') {

    dependencyCheck additionalArguments: '--format=HTML', odcInstallation: 'OWASP-ZAP-DP'
  }


//Run test 

 stage('Tests Runing') {


    sh "composer update --lock --ignore-platform-reqs"
    sh "composer install --optimize-autoloader --ignore-platform-reqs"

    sh "codecept  --no-redirect run --steps  --html "
   
    
}

//Publish report

  stage('Reports') {
        allure([
            includeProperties: false,
            jdk: '',
            properties: [],
            reportBuildPolicy: 'ALWAYS',
            results: [[path: 'tests/_output/allure-results']]
        ])
    }
}


